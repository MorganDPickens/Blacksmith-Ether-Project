<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BlackSmith Ether - Security Audit</title>
    <style>
        body,
        html {
            height: 100%;
            margin: 0;
            font-family: Arial, sans-serif;
            overflow: hidden;
            background-color: black;
            color: #ffffff;
        }

        .header {
            text-align: center;
            margin-top: 20px;
        }

        .home-button {
            position: absolute;
            top: 10px;
            left: 10px;
            padding: 10px 20px;
            background-color: red;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            font-size: 16px;
        }

        #output {
            margin-top: 20px;
            padding: 20px;
            width: 80%;
            height: 650px;
            background-color: #000;
            border: 1px solid #ffffff;
            overflow-y: scroll;
            white-space: pre-wrap;
            font-family: monospace;
            font-size: 16px;
            margin-left: auto;
            margin-right: auto;
            position: relative;
        }
    </style>
</head>

<body>
    <a href="file:///D:/ComputerCOde/BlackSmithEther/Project%201/Webpage%20Main/index.html" class="home-button">Home</a>

    <div class="header">
        <h1>Security Audit Results</h1>
    </div>

    <div id="output">Scanning files for security vulnerabilities...</div>

    <script>
        async function fetchAndAuditFiles() {
            const params = new URLSearchParams(window.location.search);
            const repoInput = params.get('repo');
            const output = document.getElementById('output');

            try {
                const repoPath = new URL(repoInput).pathname.split('/').filter(Boolean);
                if (repoPath.length < 2) {
                    output.innerHTML = 'Invalid GitHub repository link.';
                    return;
                }
                const owner = repoPath[0];
                const repo = repoPath[1];

                const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/contents`);
                const data = await response.json();

                if (response.ok) {
                    output.innerHTML = 'Audit Results:\n\n';
                    for (let file of data) {
                        if (file.type === 'file') {
                            const fileResponse = await fetch(file.download_url);
                            const fileContent = await fileResponse.text();
                            // Simulate AI-based security audit
                            const issues = mockAudit(fileContent); // Replace this with actual AI analysis

                            if (issues.length > 0) {
                                output.innerHTML += `File: ${file.path}\nIssues:\n${issues.join('\n')}\n\n`;
                            } else {
                                output.innerHTML += `File: ${file.path} - No issues found.\n\n`;
                            }
                        }
                    }
                } else {
                    output.innerHTML = `Error: ${data.message}`;
                }
            } catch (error) {
                output.innerHTML = `Error: ${error.message}`;
            }
        }

        function mockAudit(fileContent) {
            // This is a mock function to simulate security audit results.
            // In a real implementation, this would involve AI/ML analysis.
            const issues = [];
            if (fileContent.includes('eval(')) {
                issues.push('Use of eval() detected. Consider removing to avoid code injection risks.');
            }
            // Add more mock checks as needed
            return issues;
        }

        fetchAndAuditFiles();
    </script>
</body>

</html>
